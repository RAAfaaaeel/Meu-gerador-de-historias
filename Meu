import streamlit as st
import google.generativeai as genai
import time
import math

st.set_page_config(page_title="Hist√≥rias Longas para Voz IA", layout="centered")

st.markdown(
    "<style>div.block-container {padding-top: 1rem; padding-bottom: 1rem;} .stTextArea textarea {font-size:1rem;} .stDownloadButton, .stButton {width: 100%}</style>",
    unsafe_allow_html=True,
)

st.title("Gerador de Hist√≥rias para Voz IA (Mobile Ready)")

api_key = st.text_input("API Key Gemini/YouTube", type="password")
video_url = st.text_input("URL do v√≠deo (opcional)")
premissa = st.text_area("Premissa do roteiro (opcional)", height=60)

nichos = [
    "Reencontro de fam√≠lia", "Supera√ß√£o ap√≥s perda", "Milion√°rio transforma vida",
    "M√£e solo com filhos g√™meos", "Humilha√ß√£o e reden√ß√£o", "√ìrf√£os encontram fam√≠lia",
    "Filho rejeitado se torna exemplo", "Adotados por acidente", "Sacrif√≠cio pela fam√≠lia",
    "Volta por cima ap√≥s trai√ß√£o", "Perd√£o inesperado", "Segredos de inf√¢ncia revelados",
    "Pai distante reconquista filho"
]
nicho_principal = st.selectbox("Nicho principal", nichos)
nicho_secundario = st.selectbox("Nicho secund√°rio", ["Nenhum"] + [n for n in nichos if n != nicho_principal])

idiomas = {
    "Portugu√™s": "portugu√™s",
    "Ingl√™s": "ingl√™s",
    "Espanhol do M√©xico": "espanhol mexicano"
}
idioma = st.selectbox("Idioma do roteiro", list(idiomas.keys()))
idioma_prompt = idiomas[idioma]

modelos = [
    "gemini-1.5-flash (recomendado)",
    "gemini-2.5-pro-preview-06-05",
    "gemini-2.5-pro-preview-05-06",
    "gemini-2.5-flash-preview-05-20",
    "gemini-2.5-flash-preview-04-17"
]
modelo = st.selectbox("Modelo de IA", modelos, index=0)

duracoes = [("15 minutos", 15), ("30 minutos", 30), ("45 minutos", 45),
            ("1 hora", 60), ("1h30min", 90), ("2 horas", 120)]
duracao_str, duracao_min = st.selectbox("Dura√ß√£o do roteiro", duracoes, format_func=lambda x: x[0], index=4)

estilos = [
    "Direto ao ponto", "Narrativo", "Motivacional", "Di√°logo natural e espont√¢neo"
]
estilo = st.selectbox("Estilo", estilos)

perspectivas = ["Primeira pessoa", "Terceira pessoa"]
perspectiva = st.selectbox("Perspectiva", perspectivas)

intros = [
    "Curta (50-100 palavras)", "M√©dia (150-250 palavras)", "Longa (250-500 palavras)"
]
tamanho_intro = st.selectbox("Tamanho da introdu√ß√£o", intros)

diretorio_saida = st.text_input("Diret√≥rio de sa√≠da sugerido (opcional)")

# ---- L√≥gica para c√°lculo autom√°tico de blocos ----
PALAVRAS_POR_MIN = 140
PALAVRAS_POR_BLOCO = 500
total_palavras = duracao_min * PALAVRAS_POR_MIN
total_blocos = math.ceil(total_palavras / PALAVRAS_POR_BLOCO)

st.info(
    f"Sua hist√≥ria ter√° cerca de {total_palavras} palavras "
    f"({total_blocos} blocos de {PALAVRAS_POR_BLOCO} palavras)."
)

# ---- Gera√ß√£o autom√°tica ----
if st.button("Gerar roteiro completo"):
    if not api_key:
        st.warning("Insira sua API Key Gemini!")
    else:
        st.info("Gerando, aguarde... (pode demorar v√°rios minutos)")
        barra = st.progress(0)
        historia_final = ""
        ultimo_texto = ""
        genai.configure(api_key=api_key)
        model_name = modelo.split(" ")[0] if "(" in modelo else modelo
        model = genai.GenerativeModel(model_name)

        for bloco in range(total_blocos):
            # Prompt detalhado para cada bloco
            instrucao_dialogo = (
                "Gere um di√°logo extremamente natural, fluido e suave, como em uma conversa real entre amigos pr√≥ximos. "
                "Use frases de tamanhos variados, inclua pausas naturais com retic√™ncias e express√µes cotidianas quando fizer sentido, "
                "mas evite exagero ou g√≠rias for√ßadas. Evite linguagem formal, liter√°ria ou rebuscada. "
                "O texto deve soar espont√¢neo, acolhedor e humano, como uma lembran√ßa ou desabafo contado de forma leve e √≠ntima. "
                "O narrador pode demonstrar hesita√ß√£o ou pensamento alto, tornando tudo mais aut√™ntico."
                if estilo == 'Di√°logo natural e espont√¢neo' else ""
            )
            if bloco == 0:
                prompt = (
                    f"Escreva o primeiro bloco de uma hist√≥ria original e emocionante, baseada na premissa abaixo, "
                    f"usando apenas texto narrativo cont√≠nuo, sem t√≠tulos, numera√ß√£o, marca√ß√µes ou coment√°rios. "
                    f"O bloco deve ter cerca de {PALAVRAS_POR_BLOCO} palavras. "
                    f"Nicho principal: {nicho_principal}. "
                    f"Nicho secund√°rio: {nicho_secundario if nicho_secundario != 'Nenhum' else ''}. "
                    f"Estilo: {estilo.lower()}. "
                    f"{instrucao_dialogo} "
                    f"Perspectiva: {perspectiva.lower()}. "
                    f"Tamanho da introdu√ß√£o: {tamanho_intro.lower()}. "
                    f"Idioma: {idioma_prompt}. "
                    f"Premissa base: {premissa if premissa.strip() else '(crie uma hist√≥ria do zero dentro dos nichos)'} "
                    f"Termine o bloco com um cliffhanger, de forma natural."
                )
            elif bloco == total_blocos - 1:
                prompt = (
                    f"Continue imediatamente a narrativa abaixo, escrevendo o √∫ltimo bloco de cerca de {PALAVRAS_POR_BLOCO} palavras. "
                    f"Mantenha o estilo {estilo.lower()}, nicho {nicho_principal}{(' / ' + nicho_secundario) if nicho_secundario != 'Nenhum' else ''}, "
                    f"perspectiva {perspectiva.lower()}, e idioma {idioma_prompt}. "
                    f"{instrucao_dialogo} "
                    f"Nunca use t√≠tulos ou quebras. "
                    f"Ao final, adicione uma chamada para a√ß√£o humanizada, convidando o espectador a se inscrever no canal, comentar e compartilhar a hist√≥ria, sempre escrevendo tudo no idioma {idioma_prompt}."
                    f"Texto at√© agora: {ultimo_texto[-4000:]}"
                )
            else:
                prompt = (
                    f"Continue a narrativa abaixo, criando o pr√≥ximo bloco de aproximadamente {PALAVRAS_POR_BLOCO} palavras. "
                    f"N√£o use t√≠tulos, numera√ß√£o, marca√ß√µes ou coment√°rios, apenas narrativa pura. "
                    f"Mantenha o estilo {estilo.lower()}, nicho {nicho_principal}{(' / ' + nicho_secundario) if nicho_secundario != 'Nenhum' else ''}, "
                    f"perspectiva {perspectiva.lower()}, e idioma {idioma_prompt}. "
                    f"{instrucao_dialogo} "
                    f"Premissa base: {premissa if premissa.strip() else '(crie uma hist√≥ria do zero dentro dos nichos)'} "
                    f"Texto at√© agora: {ultimo_texto[-4000:]}. "
                    f"Finalize o bloco com um cliffhanger."
                )
            try:
                resposta = model.generate_content(prompt)
                bloco_gerado = resposta.text.strip().replace("\n\n", " ").replace("\n", " ")
                historia_final += " " + bloco_gerado
                ultimo_texto = historia_final
                barra.progress((bloco + 1) / total_blocos)
                time.sleep(1)
            except Exception as e:
                st.error(f"Erro ao gerar o bloco {bloco + 1}: {e}")
                break

        st.success("Hist√≥ria completa gerada!")
        st.text_area("Pr√©via da hist√≥ria (in√≠cio):", value=historia_final[:2000] + " ...", height=230)
        st.download_button(
            label="üì• Baixar Hist√≥ria Completa (.txt)",
            data=historia_final.strip(),
            file_name="historia_completa.txt",
            mime="text/plain"
        )
        st.balloons()

st.markdown(
    "<div style='font-size: 0.85em; color: #666;'>Dica: para usar no celular, abra <b>http://IP_DO_PC:8501</b> no navegador do seu smartphone conectado √† mesma Wi-Fi.</div>",
    unsafe_allow_html=True
)

